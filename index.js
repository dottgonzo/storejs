var merge = require("json-add");
var los = require("linux-online-status");
function TimeNow() {
    return new Date().getTime();
}
function objectessentials(obj, serial) {
    if (!obj.updatedAt) {
        obj.updatedAt = TimeNow();
    }
    if (!obj.serial) {
        obj.serial = serial;
    }
    return obj;
}
module.exports = (function () {
    function StoreApi(components, serial, timezone) {
        this.components = [];
        this.timezone = timezone;
        this.serial = serial;
        this.components = components;
        var sys = this.system;
        los().then(function (data) {
            sys = data;
        }).catch(function (err) {
            console.log("linux-online-status error:", err);
        });
    }
    StoreApi.prototype.status = function (obj, type) {
        var defaultobj = {};
        if (obj) {
            merge(obj, defaultobj);
            if (type) {
                obj.type = type;
            }
            else {
                obj.type = "status";
            }
        }
        else {
            obj = this.system;
            merge(obj, defaultobj);
            obj.type = "status";
        }
        if (!obj._id) {
            obj._id = obj.type + "_" + this.serial;
        }
        objectessentials(obj, this.serial);
        return obj;
    };
    StoreApi.prototype.data = function (obj, uid) {
        objectessentials(obj, this.serial);
        if (!obj._id) {
            for (var i in this.components) {
                if (this.components[i].uid === uid) {
                    obj._id = this.components[i].type + "_" + uid + "_" + obj.updatedAt;
                }
            }
        }
        return obj;
    };
    return StoreApi;
})();

//# sourceMappingURL=data:application/json;base64,
